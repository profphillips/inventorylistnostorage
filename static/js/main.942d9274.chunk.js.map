{"version":3,"sources":["InventoryListNoStorage.js","App.js","reportWebVitals.js","index.js"],"names":["defaultList","name","qty","id","uuid","InventoryListNoStorage","useState","rowDataArray","setRowDataArray","updateRow","oneRow","newValue","updatedItems","map","row","prevTodos","removeRow","filter","className","InputForm","addNewRow","item","ListRow","remove","update","Footer","initialVal","state","setState","useToggle","isEditing","toggle","EditRowForm","aria-label","onClick","useInputState","handleNameChange","resetNameField","handleQtyChange","resetQtyField","onSubmit","e","preventDefault","type","value","placeholder","onChange","label","autoFocus","handleChange","reset","setValue","target","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.942d9274.chunk.js","sourcesContent":["// This React app maintains a simple inventory list. There is no storage\r\n// at this point. The design goal was to put all of the functions in\r\n// a single file to help study how they work.\r\n// by John Phillips on 2021-02-16\r\n\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./Style.css\";\r\n\r\nconst defaultList = [\r\n  { name: \"Milk\", qty: \"2 gallons\", id: uuid() },\r\n  { name: \"Bread\", qty: \"2 loaves\", id: uuid() },\r\n];\r\n\r\n// ***** Main function *******************************************************\r\n// or use: const InventoryList = () => { and move export default to bottom\r\nexport default function InventoryListNoStorage() {\r\n  const [rowDataArray, setRowDataArray] = useState(defaultList);\r\n\r\n  // const addNewRow = ( item, qty ) => {\r\n  function addNewRow(item, qty) {\r\n    setRowDataArray([...rowDataArray, { name: item, qty: qty, id: uuid() }]);\r\n  }\r\n\r\n  // const updateRow = (oneRow, qty) => {\r\n  function updateRow(oneRow, qty) {\r\n    // just update qty and leave name and id as is\r\n    const newValue = { name: oneRow.name, qty: qty, id: oneRow.id };\r\n    const updatedItems = rowDataArray.map((row) => {\r\n      if (row.id === oneRow.id) {\r\n        return { ...newValue };\r\n      }\r\n      return row;\r\n    });\r\n    // ? no idea why the following line works like this\r\n    setRowDataArray((prevTodos) => [...updatedItems]);\r\n  }\r\n\r\n  // const removeRow = (id) => {\r\n  function removeRow(id) {\r\n    setRowDataArray(rowDataArray.filter((row) => row.id !== id));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Wrapper\">\r\n        <h1>Inventory List</h1>\r\n        <InputForm addNewRow={addNewRow} className=\"InputForm\" />\r\n        <div className=\"ListContainer\">\r\n          <ul>\r\n            {rowDataArray.map((oneRow) => (\r\n              <li key={oneRow.id}>\r\n                <ListRow\r\n                  oneRow={oneRow}\r\n                  remove={removeRow}\r\n                  update={updateRow}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n// ***** End Main function ***************************************************\r\n// export default ItemList;\r\n\r\n// displays a single row of data with delete and edit buttons\r\nfunction ListRow({ oneRow, remove, update }) {\r\n  const [isEditing, toggle] = useToggle(false);\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <EditRowForm oneRow={oneRow} update={update} toggle={toggle} />\r\n      ) : (\r\n        // span to wrap elements and later add style\r\n        <span>\r\n          <span>\r\n            {oneRow.name} : {oneRow.qty}\r\n          </span>\r\n          <span className=\"ButtonGroup\">\r\n            <button\r\n              className=\"Button\"\r\n              aria-label=\"Delete\"\r\n              onClick={() => remove(oneRow.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button className=\"Button\" aria-label=\"Edit\" onClick={toggle}>\r\n              Edit\r\n            </button>\r\n          </span>\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// display's empty item name and qty text fields; when submitted it\r\n// adds a new row to the data array\r\nfunction InputForm({ addNewRow }) {\r\n  const [name, handleNameChange, resetNameField] = useInputState(\"\");\r\n  const [qty, handleQtyChange, resetQtyField] = useInputState(\"\");\r\n  return (\r\n    <form\r\n      className=\"InputForm\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        addNewRow(name, qty);\r\n        resetNameField();\r\n        resetQtyField();\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        placeholder=\"Type new item name\"\r\n        onChange={handleNameChange}\r\n        label=\"Add New Item\"\r\n        autoFocus={true}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={qty}\r\n        placeholder=\"Type new quantity\"\r\n        onChange={handleQtyChange}\r\n        label=\"Add New Quantity\"\r\n      />\r\n      <button type=\"submit\">Add new item</button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// allows user to update an item's quantity\r\nfunction EditRowForm({ oneRow, update, toggle }) {\r\n  const [value, handleChange, reset] = useInputState(oneRow.qty);\r\n  return (\r\n    <form\r\n      className=\"InputForm\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        update(oneRow, value);\r\n        reset();\r\n        toggle();\r\n      }}\r\n    >\r\n      {oneRow.name}\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        label=\"Update quantity\"\r\n        autoFocus={true}\r\n      />\r\n      Press Enter to Update\r\n    </form>\r\n  );\r\n}\r\n\r\n// utility function to toggle a state from false to true and back\r\nfunction useToggle(initialVal = false) {\r\n  const [state, setState] = useState(initialVal);\r\n  const toggle = () => setState(!state);\r\n  return [state, toggle];\r\n}\r\n\r\n// utility functions to fill in a text field as the user types;\r\n// resets the text field to \"\" after the user presses enter\r\nfunction useInputState(initialVal) {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => setValue(e.target.value);\r\n  const reset = () => setValue(\"\");\r\n  return [value, handleChange, reset];\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <p className=\"Footer\">\r\n      Simple Inventory List by John Phillips on Febuary 16, 2021. Source at{\" \"}\r\n      <a href=\"https://github.com/profphillips/inventorylistnostorage\">\r\n        https://github.com/profphillips/inventorylistnostorage\r\n      </a>\r\n      . Live page at{\" \"}\r\n      <a href=\"https://profphillips.github.io/inventorylistnostorage/\">\r\n        https://profphillips.github.io/inventorylistnostorage/\r\n      </a>\r\n      .\r\n    </p>\r\n  );\r\n}\r\n\r\n// ***** End Of File *********************************************************\r\n","import InventoryListNoStorage from \"./InventoryListNoStorage\";\n\nexport default function App() {\n  return (\n    <div>\n      <InventoryListNoStorage />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}